<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_SL1K0_POWER" Id="{240fc45f-e95a-4835-bc21-09599e041170}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_SL1K0_POWER
VAR
    {attribute 'pytmc' := '
        pv: SL1K0:POWER
        io: io
    '}
    {attribute 'TcLinkTo' := '.RTD_South_1.iRaw := TIIB[SL1K0-EL3202-E6]^RTD Inputs Channel 1^Value;
                              .RTD_South_1.bError := TIIB[SL1K0-EL3202-E6]^RTD Inputs Channel 1^Status^Error;
                              .RTD_South_1.bUnderrange := TIIB[SL1K0-EL3202-E6]^RTD Inputs Channel 1^Status^Underrange;
                              .RTD_South_1.bOverrange := TIIB[SL1K0-EL3202-E6]^RTD Inputs Channel 1^Status^Overrange;
                              .RTD_South_2.iRaw := TIIB[SL1K0-EL3202-E6]^RTD Inputs Channel 2^Value;
                              .RTD_South_2.bError := TIIB[SL1K0-EL3202-E6]^RTD Inputs Channel 2^Status^Error;
                              .RTD_South_2.bUnderrange := TIIB[SL1K0-EL3202-E6]^RTD Inputs Channel 2^Status^Underrange;
                              .RTD_South_2.bOverrange := TIIB[SL1K0-EL3202-E6]^RTD Inputs Channel 2^Status^Overrange;
                              .RTD_TOP_1.iRaw := TIIB[SL1K0-EL3202-E7]^RTD Inputs Channel 1^Value;
                              .RTD_TOP_1.bError := TIIB[SL1K0-EL3202-E7]^RTD Inputs Channel 1^Status^Error;
                              .RTD_TOP_1.bUnderrange := TIIB[SL1K0-EL3202-E7]^RTD Inputs Channel 1^Status^Underrange;
                              .RTD_TOP_1.bOverrange := TIIB[SL1K0-EL3202-E7]^RTD Inputs Channel 1^Status^Overrange;
                              .RTD_TOP_2.iRaw := TIIB[SL1K0-EL3202-E7]^RTD Inputs Channel 2^Value;
                              .RTD_TOP_2.bError := TIIB[SL1K0-EL3202-E7]^RTD Inputs Channel 2^Status^Error;
                              .RTD_TOP_2.bUnderrange := TIIB[SL1K0-EL3202-E7]^RTD Inputs Channel 2^Status^Underrange;
                              .RTD_TOP_2.bOverrange := TIIB[SL1K0-EL3202-E7]^RTD Inputs Channel 2^Status^Overrange;
                              .RTD_North_1.iRaw := TIIB[SL1K0-EL3202-E8]^RTD Inputs Channel 1^Value;
                              .RTD_North_1.bError := TIIB[SL1K0-EL3202-E8]^RTD Inputs Channel 1^Status^Error;
                              .RTD_North_1.bUnderrange := TIIB[SL1K0-EL3202-E8]^RTD Inputs Channel 1^Status^Underrange;
                              .RTD_North_1.bOverrange := TIIB[SL1K0-EL3202-E8]^RTD Inputs Channel 1^Status^Overrange;
                              .RTD_North_2.iRaw := TIIB[SL1K0-EL3202-E8]^RTD Inputs Channel 2^Value;
                              .RTD_North_2.bError := TIIB[SL1K0-EL3202-E8]^RTD Inputs Channel 2^Status^Error;
                              .RTD_North_2.bUnderrange := TIIB[SL1K0-EL3202-E8]^RTD Inputs Channel 2^Status^Underrange;
                              .RTD_North_2.bOverrange := TIIB[SL1K0-EL3202-E8]^RTD Inputs Channel 2^Status^Overrange;
                              .RTD_Bottom_1.iRaw := TIIB[SL1K0-EL3202-E9]^RTD Inputs Channel 1^Value;
                              .RTD_Bottom_1.bError := TIIB[SL1K0-EL3202-E9]^RTD Inputs Channel 1^Status^Error;
                              .RTD_Bottom_1.bUnderrange := TIIB[SL1K0-EL3202-E9]^RTD Inputs Channel 1^Status^Underrange;
                              .RTD_Bottom_1.bOverrange := TIIB[SL1K0-EL3202-E9]^RTD Inputs Channel 1^Status^Overrange;
                              .RTD_Bottom_2.iRaw := TIIB[SL1K0-EL3202-E9]^RTD Inputs Channel 2^Value;
                              .RTD_Bottom_2.bError := TIIB[SL1K0-EL3202-E9]^RTD Inputs Channel 2^Status^Error;
                              .RTD_Bottom_2.bUnderrange := TIIB[SL1K0-EL3202-E9]^RTD Inputs Channel 2^Status^Underrange;
                              .RTD_Bottom_2.bOverrange := TIIB[SL1K0-EL3202-E9]^RTD Inputs Channel 2^Status^Overrange;
                              .AptArrayStatus := TIIB[PMPS_PRE]^IO Outputs^AptArrayStatus^AptArrayStatus[1];
                              .AptArrayReq := TIIB[PMPS_PRE]^IO Inputs^AptArrayReq^AptArrayReq[1];
                              .fbFlowSwitch.bFlowOk := TIIB[IM1K0-EL1004]^Channel 3^Input'}
    fbSL1K0: FB_SLITS_POWER;
//{attribute 'TcLinkTo' := 'TIIB[PMPS_PRE]^IO Outputs^AptArrayStatus'}
    {attribute 'pytmc' := '
    pv: SL1K0:POWER:GO;
    io: io;
    field: ZNAM False;
    field: ONAM True;
    '}
    bExecuteMotion:BOOL ;
    //GET PMPS Move Ok bit
    // Default True until it is properly linked to PMPS bit
    bMoveOk:BOOL :=TRUE;

    //for testing purposes only. comment-out/delete once done.
    mcPower : ARRAY [1..4] OF MC_POWER;
    bTest:BOOL:=FALSE;

    (*Offsets*)
    (* Absolute encoder value at the HLS + Absolure eoncoder value at the centered beam *)
    rEncoderOffsetTop: REAL :=  -11.2; // -11.810; (* 0+(-15)*)
    rEncoderOffsetBottom: REAL := -12.02; //-12.499; (* 0+(-15)*)
    rEncoderOffsetNorth: REAL := -10.88; // -11.4;//-4.6;(* 0+(-15)*)
    rEncoderOffsetSouth: REAL := -12.475; //-13;(* 0+(-15)*)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
fbSL1K0.bMoveOk := bMoveOk;
Main.M18.bLimitBackwardEnable := True;



//for testing purposes only. comment-out/delete once done.
If bTest THEN
    mcPower[1](axis:=Main.M18.Axis, Enable:=TRUE, enable_positive:=Main.M18.bLimitForwardEnable, enable_negative:=Main.M18.bLimitBackwardEnable);
mcPower[2](axis:=Main.M19.Axis, Enable:=TRUE, enable_positive:=Main.M19.bLimitForwardEnable, enable_negative:=Main.M19.bLimitBackwardEnable);
mcPower[3](axis:=Main.M20.Axis, Enable:=TRUE, enable_positive:=Main.M20.bLimitForwardEnable, enable_negative:=Main.M20.bLimitBackwardEnable);
mcPower[4](axis:=Main.M21.Axis, Enable:=TRUE, enable_positive:=Main.M21.bLimitForwardEnable, enable_negative:=Main.M21.bLimitBackwardEnable);

else

//force that inner limit switch on south motor is not depressed. need to debug further in winter down.
//Main.M18.bLimitForwardEnable := TRUE;
fbSL1K0.rEncoderOffsetTop := rEncoderOffsetTop;
fbSL1K0.rEncoderOffsetBottom := rEncoderOffsetBottom;
fbSL1K0.rEncoderOffsetNorth := rEncoderOffsetNorth;
fbSL1K0.rEncoderOffsetSouth := rEncoderOffsetSouth;

fbSL1K0(stTopBlade:=  Main.M19,
        stBottomBlade:= Main.M21,
        stNorthBlade:=  Main.M20,
        stSouthBlade:=  Main.M18,
        bExecuteMotion:=bExecuteMotion,
        io_fbFFHWO := GVL.fbFastFaultOutput1,
        fbArbiter := GVL.fbArbiter);

fbSL1K0.M_UpdatePMPS(1);

END_IF

]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>