<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_PF1K0_PPM" Id="{0ae23a26-4e57-4314-9f23-b11f6f968805}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_PF1K0_PPM
VAR
   {attribute 'TcLinkTo' := '.i_xInsertedLS := TIIB[PF1K0-MPA-EL1004]^Channel 1^Input;
                             .i_xRetractedLS := TIIB[PF1K0-MPA-EL1004]^Channel 2^Input;
                             .q_xInsert_DO :=  TIIB[PF1K0-MPA-EL2004]^Channel 1^Output;
                             .q_xRetract_DO :=  TIIB[PF1K0-MPA-EL2004]^Channel 2^Output
    '}

     {attribute 'pytmc' :=' pv: PF1K0:MPA:01 '}
    PF1K0_MPA_01: FB_MPA := (sName := 'PF1K0:PPM:MPA:01');

    // PSUEDO AXIS for PF1K0 PPM
    {attribute 'pytmc' := 'pv: PF1K0:PPM:MPA_INTERFACE'}
    {attribute 'TcLinkTo' := '.bLimitForwardEnable  := TIIB[PF1K0-MPA-EL1004]^Channel 1^Input;
                              .bLimitBackwardEnable := TIIB[PF1K0-MPA-EL1004]^Channel 2^Input;'}
    PF1K0_MPA_MOTION_INTERFACE: ST_MotionStage := (sName := 'PF1K0:PPM:MPA_INTERFACE');

    {attribute 'pytmc' := 'pv: PF1K0:PPM'}
    {attribute 'TcLinkTo' := '.fbPowerMeter.iVoltageINT := TIIB[PF1K0-EL3062]^AI Standard Channel 1^Value;
                              .fbPowerMeter.fbThermoCouple.bError := TIIB[PF1K0-EL3314]^TC Inputs Channel 1^Status^Error;
                              .fbPowerMeter.fbThermoCouple.bUnderrange := TIIB[PF1K0-EL3314]^TC Inputs Channel 1^Status^Underrange;
                              .fbPowerMeter.fbThermoCouple.bOverrange := TIIB[PF1K0-EL3314]^TC Inputs Channel 1^Status^Overrange;
                              .fbPowerMeter.fbThermoCouple.iRaw := TIIB[PF1K0-EL3314]^TC Inputs Channel 1^Value;
                              .fbFlowSwitch.bFlowOk := TIIB[ST1K4-EL1004-E5]^Channel 3^Input'}
    fbPF1K0PPM: FB_PPM;
    fbStateSetup: FB_StateSetupHelper;
    stDefault: ST_PositionState := (
        fVelocity := 15,
        bMoveOk := TRUE,
        bValid := TRUE
    );

    fOutPosition : LREAL := 0.0;
    fInPosition : LREAL := 1.0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
fbStateSetup(stPositionState:=stDefault, bSetDefault:=TRUE);

fbStateSetup(stPositionState:=fbPF1K0PPM.stOut, fPosition:=fOutPosition, sPmpsState:='PF1K0:PPM-OUT');
fbStateSetup(stPositionState:=fbPF1K0PPM.stPower, fPosition:=fInPosition, sPmpsState:='PF1K0:PPM-POWERMETER');

IF fbPF1K0PPM.eEnumSet = E_PPM_States.OUT THEN
    WRITE_PROTECTED_BOOL(Ptr := ADR(PF1K0_MPA_01.q_stAct.bRetract_SW), Value := TRUE);
    WRITE_PROTECTED_BOOL(Ptr := ADR(PF1K0_MPA_01.q_stAct.bInsert_SW), Value := FALSE);
ELSIF fbPF1K0PPM.eEnumSet = E_PPM_States.POWERMETER THEN
    WRITE_PROTECTED_BOOL(Ptr := ADR(PF1K0_MPA_01.q_stAct.bRetract_SW), Value := FALSE);
    WRITE_PROTECTED_BOOL(Ptr := ADR(PF1K0_MPA_01.q_stAct.bInsert_SW), Value := TRUE);
END_IF

fbPF1K0PPM(
    fbFFHWO := GVL.fbFastFaultOutput2,
    fbArbiter := GVL.fbArbiter2,
    stYStage := PF1K0_MPA_MOTION_INTERFACE,
    sDeviceName := 'PF1K0:PPM',
    sTransitionKey := 'PF1K0:PPM-TRANSITION',
    bEnableMotion := TRUE,
    bEnableBeamParams := TRUE,
    bEnablePositionLimits := TRUE,
);

PF1K0_MPA_01(
    ibInsertOK:= TRUE,
    ibRetractOK:= TRUE ,
    ibPMPS_OK:= TRUE ,
    ibOverrideInterlock:= ,
    q_stAct=> ,
    xMPS_OK=> ,
    xDone=> ,
    i_xReset := ,
    io_fbFFHWO := GVL.fbFastFaultOutput1,
);

// write to ST MOTION so that the move will show complte
IF PF1K0_MPA_01.q_stAct.eState = E_PositionState.RETRACTED  THEN
    WRITE_PROTECTED_LREAL(Ptr := ADR(PF1K0_MPA_MOTION_INTERFACE.stAxisStatus.fActPosition), Value := fOutPosition);
ELSIF PF1K0_MPA_01.q_stAct.eState = E_PositionState.INSERTED  THEN
    WRITE_PROTECTED_LREAL(Ptr := ADR(PF1K0_MPA_MOTION_INTERFACE.stAxisStatus.fActPosition), Value := fInPosition);
END_IF
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>